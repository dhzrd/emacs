#+title: Emacs
#+date: <2024-11-22 Fri>
#+author: Daniel Hazard
#+PROPERTY: header-args :tangle yes

This ~org~ file tangles to two different ~emacs-lisp~ files in the same directory: ~early-init.el~ and ~init.el~.

* early-init.el
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
** GUI switches
Prevent window decorations from loading and remove outer padding. In other words, launch Emacs without a visible frame and ensure that there's no gap between Emacs and other windows.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (setq frame-resize-pixelwise t)
#+end_src

Disable scroll-bar, tool-bar, start-up greeting message, and message at the top of Scratch buffers.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src

** Native Compilation

#+begin_src emacs-lisp
  (when (featurep 'native-compile)
    ;; Silence compiler warnings as they can be pretty disruptive
    (setopt native-comp-async-report-warnings-errors nil)

    ;; Make native compilation happens asynchronously
    (setopt native-comp-deferred-compilation t))
#+end_src

*** Native Compilation Cache Location
Preset for =no-littering= (from https://github.com/emacscollective/no-littering).
#+begin_src emacs-lisp
  (when (and (fboundp 'startup-redirect-eln-cache)
	     (fboundp 'native-comp-available-p)
	     (native-comp-available-p))
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** no-littering

#+begin_src emacs-lisp
  (use-package no-littering
    :init
    (eval-and-compile ; Ensure values don't differ at compile time.
      (setq no-littering-etc-directory
            (expand-file-name "etc/" user-emacs-directory))
      (setq no-littering-var-directory
            (expand-file-name "var/" user-emacs-directory)))
    :config
    (no-littering-theme-backups)
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory)))
#+end_src

** package management

#+begin_src emacs-lisp
  ;; (use-package package
  ;;   :custom package-archives
  ;;         '(("gnu" . "https://elpa.gnu.org/packages/")
  ;;           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
  ;;           ("melpa" . "https://melpa.org/packages/")))

  (setopt package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("nongnu" . "https://elpa.nongnu.org/nongnu/")
            ("melpa" . "https://melpa.org/packages/")))
#+end_src

The following setting enables globally the ~:ensure~ keyword for ~use-package~ declarations. To override locally use ~:ensure nil~ in the ~use-package~ declaration. For more see https://www.gnu.org/software/emacs/manual/html_mono/use-package.html#Install-package.

#+begin_src emacs-lisp :tangle no
  (use-package use-package
    :custom
    (use-package-always-ensure t))
#+end_src

** Line-wrapping

#+begin_src emacs-lisp
  (use-package prog-mode
    :hook (prog-mode . display-fill-column-indicator-mode))

  (use-package display-fill-column-indicator
    :custom (display-fill-column-indicator-character nil)                                   
    :custom-face (fill-column-indicator ((t (:height 1.0 :foreground "grey"))))
    :hook (prog-mode . display-fill-column-indicator-mode))
#+end_src

** mode-line

#+begin_src emacs-lisp
  (use-package minions
    :custom
    (minions-mode-line-delimiters nil)
    :config 
    (minions-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package mood-line
    :after minions
    :preface
    (defun my/mood-line-segment-major-mode ()
      "Return the name of the major mode of the current buffer."
      (concat (format-mode-line minions-mode-line-modes 'mood-line-major-mode) ""))
    :custom
    (mood-line-glyph-alist mood-line-glyphs-unicode)
    (mood-line-format
     (mood-line-defformat
      :left
      (((mood-line-segment-buffer-status) . " ")
       ((mood-line-segment-buffer-name)   . " : ")
       (my/mood-line-segment-major-mode)
       (mood-line-segment-vc)         . "  ")
      :right
      (((mood-line-segment-scroll)             . " ")
       ((mood-line-segment-cursor-position)    . "  ")
       ((when (mood-line-segment-checker) "|") . "  ")
       ((mood-line-segment-checker)            . "  ")))
    :config
    (mood-line-mode)))

#+end_src

*** mode-line-bell

#+begin_src emacs-lisp
  (use-package mode-line-bell
    :init (mode-line-bell-mode))
#+end_src

** Fonts and other styles

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Input Mono")
  (set-face-attribute 'fixed-pitch nil :font "Input Mono" :height 1.0)
  (set-face-attribute 'variable-pitch nil :font "Input Sans" :height 1.0)
  (global-visual-line-mode 1)
#+end_src

*** mixed-pitch-mode

#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode))
#+end_src

** org-mode

#+begin_src emacs-lisp
  (use-package org
    :delight org-mode "org-mode"		; define mode-line lighter
    :custom
    (org-startup-indented t)
    (org-ellipsis " …")
    (set-face-underline 'org-ellipsis nil) ; remove underline from custom org-ellipsis
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)
    :hook (org-mode . visual-line-mode)
    :config

    ;; Rebind some commands in org-mode so as to free up some key sequences (that are elsewhere defined)

    ;; (unbind-key "C-j" org-mode-map)	; originally org-return-and-maybe-indent
    ;; (bind-key "C-m" 'org-return-and-maybe-indent org-mode-map) ; originally (org-return) which is also available at RET

    (unbind-key "C-," org-mode-map)	; originally org-cycle-agenda-files
    (unbind-key "C-'" org-mode-map)	; originally org-cycle-agenda-files
    (bind-key "C-<" 'org-cycle-agenda-files org-mode-map))
#+end_src

*** org-modern

#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-modern-hide-stars nil)		; adds extra indentation
    (org-modern-block-name '("" . ""))
    (org-modern-fold-stars
     '(("►" . "▼") ("►" . "▼") ("►" . "▼") ("►" . "▼") ("►" . "▼")))
    :hook
    (org-mode . org-modern-mode))
#+end_src

**** org-modern-indent

#+begin_src emacs-lisp
  (use-package org-modern-indent
    :after org-modern
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

*** org-tidy

#+begin_src emacs-lisp
  (use-package org-tidy
    
    :hook
    (org-mode . org-tidy-mode))
#+end_src

** Key-mapping and -binding
*** Modifiers Keys on MacOS

#+begin_src emacs-lisp
  (use-package ns-win
    :when (eq system-type 'darwin)
    :init
    (setopt mac-command-modifier 'meta
            mac-option-modifier 'super
            mac-function-modifier 'hyper
            mac-right-option-modifier nil))
#+end_src

*** free-keys

#+begin_src emacs-lisp
  (use-package free-keys
    :custom
    (free-keys-modifiers '("" "C" "M" "C-M" "s" "H")))
#+end_src

** Completion and the Minibuffer
*** Save recent files
#+begin_src emacs-lisp
  (use-package recentf
    :config
    ;; (setq recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG" "github.*txt$"
    ;;                         "[0-9a-f]\\{32\\}-[0-9a-f]\\{32\\}\\.org"
    ;;                         ".*png$" ".*cache$"))
    (setq recentf-max-saved-items 500))
#+end_src

*** Save minibuffer history
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :hook ((after-init . vertico-mode)
           (vertico-mode . vertico-multiform-mode)))
#+end_src

*** Consult
#+begin_src emacs-lisp
  (use-package consult
    
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           ;; Other commands
           ("C-x C-r" . consult-recent-file)) ;; orig. find-file-read-only

  
    :hook
    ;; Enable automatic preview at point in the *Completions* buffer.
    (completion-list-mode . consult-preview-at-point-mode)

    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<"))
#+end_src

*** Embark

#+begin_src emacs-lisp
  (use-package embark
    
    :after vertico
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)	; originally x-ref-goto-xref
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    :custom
    ;; replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult
     ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Corfu

#+begin_src emacs-lisp
  (use-package corfu-
    :bind ("s-<tab>" . corfu-expand)
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    ;; (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    
    :bind
    (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

*** which-key

#+begin_src emacs-lisp
  (use-package which-key
    
    :config
    (which-key-mode))
#+end_src

*** transient

#+begin_src emacs-lisp
  (use-package transient)
#+end_src

*** Templates and Snippets

#+begin_src emacs-lisp
  ;; Configure Tempel
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
  )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection)
#+end_src

** Writing, Editing, and Navigation

#+begin_src emacs-lisp
  ;; from http://whattheemacsd.com/editing-defuns.el-02.html
  (defun move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))
  (bind-key "C-s-<down>" 'move-line-down)

  (defun move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (move-to-column col)))
  (bind-key "C-s-<up>" 'move-line-up)
#+end_src

*** dabbrev

*** avy
#+begin_src emacs-lisp
  (use-package avy

    :bind 
    ("M-c" . avy-goto-char))		; originally (capitalize-word)
#+end_src

*** ace-link

#+begin_src emacs-lisp
  (use-package ace-link
    
    :config
    (ace-link-setup-default))
#+end_src

*** ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    
    :bind ("M-o". ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

*** zoom-window

#+begin_src emacs-lisp
  (use-package zoom-window
    
    :bind ("C-\\" . zoom-window-zoom))	; originally toggleinput-method
#+end_src

*** vundo
#+begin_src emacs-lisp
  (use-package vundo
    
    :bind ("C-x u" . vundo))
#+end_src
*** expreg
#+begin_src emacs-lisp :tangle no
  (use-package expreg
    :bind
    (("M-=" . expreg-expand)
     ("M-+" . expreg-contract)))
#+end_src

*** denote

#+begin_src emacs-lisp
  (use-package denote
    
    :bind (("C-c n n" . denote)
	   ("C-c n s" . denote-subdirectory)
	   ("C-c n i" . denote-link)
	   ("C-c n l" . denote-link-find-file)
	   ("C-c n b" . denote-link-backlinks))
    :hook
    (dired-mode . denote-dired-mode)
    :custom
    (denote-directory "~/notes/"))

  (use-package consult-denote
    
    :bind (("C-c n f" . consult-denote-find)
	   ("C-c n g" . consult-denote-grep))
    :config
    (consult-denote-mode 1))
#+end_src

*** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    
    :after yasnippet)
#+end_src

** Windows, Buffers, and Tabs
*** tab-bar
#+begin_src emacs-lisp
  (use-package tab-bar
    :custom ((tab-bar-show nil)		; hide bar if <= 1 tabs open
             (tab-bar-auto-width nil)
             (tab-bar-select-tab-modifiers '(super))
             (tab-bar-close-button-show nil)))


  ;; (setopt tab-bar-show nil) ; on customize-set-variable see https://emacs.stackexchange.com/a/106
  ;; (setq tab-bar-close-button-show nil)       ;; hide tab close / X button
  ;; (setq tab-bar-tab-hints nil) ;; show tab numbers
  ;; (setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator)) ;; elements to include in bar

#+end_src

*** activities

#+begin_src emacs-lisp
  (use-package activities
    :init
    (activities-mode)
    (activities-tabs-mode)
    ;; Prevent `edebug' default bindings from interfering.
    (setq edebug-inhibit-emacs-lisp-mode-bindings t)
    :config
    (bind-keys :prefix-map my-activities-map
               :prefix "C-x C-a"
               :prefix-docstring "Keymap for activities-mode"
               ("C-n" . activities-new)
               ("C-d" . activities-define)
               ("C-a" . activities-resume)
               ("C-s" . activities-suspend)
               ("C-k" . activities-kill)
               ("RET" . activities-switch)
               ("b" . activities-switch-buffer)
               ("g" . activities-revert)
               ("l" . activities-list)))
#+end_src

*** popper

#+begin_src emacs-lisp
  (use-package popper
    :bind (("H-`"   . popper-toggle)
           ("H-<tab>"   . popper-cycle)
           (:map popper-mode-map
                 ("H-~" . popper-toggle-type)))
    :custom
    ;; specify buffer types for popper to control
    (popper-reference-buffers '("Output\\*$"
                                "\\*Async Shell Command\\*"
                                help-mode
                                compilation-mode
                                ;; and suppress or hide some of them
                                ("\\*Messages\\*" . hide)
                                ("\\*Warnings\\*" . hide)))
    :hook
    (after-init . popper-mode)
    (After-init . popper-echo-mode))
#+end_src

*** winner-mode

#+begin_src emacs-lisp
  (use-package winner
    :hook (after-init . winner-mode)
    :bind (("s-/" . winner-undo)
           ("s-?" . winner-redo))
    :custom
    (winner-dont-bind-my-keys t)
    (winner-boring-buffers '("*Completions*"
                             "*Compile-Log*"
                             "*inferior-lisp*"
                             "*Fuzzy Completions*"
                             "*Apropos*"
                             "*Help*"
                             "*Buffer List*"
                             "*Ibuffer*"
                             "*Warnings*"
                             "*Messages*"))) 
#+end_src

*** windmove

#+begin_src emacs-lisp :tangle no
  (use-package windmove
    :config
    (windmove-default-keybindings 'super))
#+end_src

** dired
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
*** dired+
#+begin_src emacs-lisp :tangle no
  (use-package dired+)
#+end_src

*** casual-dired
#+begin_src emacs-lisp :tangle no
  (use-package casual-dired
    :commands casual-dired-tmenu
    :bind (:map dired-mode-map ("C-z d h" . #'casual-dired-tmenu)))
#+end_src

*** dired-x

#+begin_src emacs-lisp :tangle no 
  (use-package dired-x
    
    :config
    (dired-omit-mode 1)
    :custom
    (dired-omit-extensions ".DS_Store")
    (dired-find-subdir t))
#+end_src

** Version Control
*** magit
#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))
#+end_src

** Programming

#+begin_src emacs-lisp
  (use-package geiser-mit 
    
    :config
    (setq geiser-racket-binary (executable-find "Racket")))

  ;; (use-package ultra-scroll-mac
  ;;   :if (eq window-system 'mac)
  ;;   ;:load-path "~/code/emacs/ultra-scroll-mac" ; if you git clone'd instead of package-vc-install
  ;;   :init
  ;;   (setq scroll-conservatively 101 ; important!
  ;;         scroll-margin 0) 
  ;;   :config
  ;;   (ultra-scroll-mac-mode 1))



  ;; (use-package py-vterm-interaction
  ;;   :hook (python-mode . py-vterm-interaction-mode)
  ;;   :config
  ;;   ;;; Suggested:
  ;;   ;; (setq-default py-vterm-interaction-repl-program "ipython")
  ;;   ;; (setq-default py-vterm-interaction-silent-cells t)
  ;;   )
#+end_src

*** tree-sitter

#+begin_src emacs-lisp
  (use-package tree-sitter
    )
#+end_src

**** tree-sitter-langs

#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    
    :after tree-sitter
    :config
    (tree-sitter-langs-install-grammars :skip-if-installed))
#+end_src

**** treesit-auto

#+begin_src emacs-lisp
  (use-package treesit-auto
    :after tree-sitter
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

*** python

#+begin_src emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-ts-mode)
    ;; :hook (python-ts-mode (lambda () (run-hooks 'python-mode-hook)))
    :custom
    (fill-column 72)
    (python-indent-offset 4)
    (python-shell-completion-native-enable nil)) ; see https://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline
#+end_src

*** racket
** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools

    :pin manual ;; manually update
    :mode  ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward))
    ;; :init
    ;; (pdf-loader-install)
    :config
    (pdf-loader-install)
    ;; (pdf-tools-install :no-query)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-width))
#+end_src

** info-variable-pitch

https://github.com/kisaragi-hiu/info-variable-pitch

#+begin_src emacs-lisp
  (use-package info-variable-pitch
    
    :hook (info-mode . info-variable-pitch-mode))
#+end_src

** olivett-mode

#+begin_src emacs-lisp
  (use-package olivetti
    )
#+end_src

** buffer-flip

#+begin_src emacs-lisp
  (use-package buffer-flip
    
    :bind  (("M-\\" . buffer-flip)	; originally delete-horizontal-space
            :map buffer-flip-map
            ( "M-\\" .   buffer-flip-forward) 
            ( "M-|" . buffer-flip-backward) ; originally shell-command-on-region
            ( "M-ESC" .     buffer-flip-abort))
    ;; :config
    ;; (setq buffer-flip-skip-patterns
    ;;       '("^\\*helm\\b"
    ;;         "^\\*swiper\\*$"))
    )
#+end_src

** fwb-cmds

#+begin_src emacs-lisp
  (use-package fwb-cmds
    
    :bind ("s-\\" . fwb-toggle-window-split))
#+end_src

* TO-DO
** frame commands
*** thumb frames
#+begin_src emacs-lisp
  (use-package frame-fns
    :load-path "lisp"
    )

  (use-package frame-cmds
    :load-path "lisp"
    )

  (use-package thumb-frm
    :load-path "lisp"
    )
#+end_src
* lettercase

#+begin_src emacs-lisp
  (bind-keys :prefix-map my-prefix-map-letter-case
             :prefix "M-l"
             :prefix-docstring "My prefix keymap for lettercase commands"
             ("c" . capitalize-word)
             ("l" . downcase-word)
             ("L" . downcase-region)
             ("u" . upcase-word)
             ("U" . upcase-word))
#+end_src
