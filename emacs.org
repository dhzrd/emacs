#+title: Emacs
#+date: <2024-11-22 Fri>
#+author: Daniel Hazard
#+PROPERTY: header-args :tangle yes
This ~org~ file tangles to two different ~emacs-lisp~ files in the same directory: ~early-init.el~ and ~init.el~.
* early-init.el
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
** GUI switches
Prevent window decorations from loading and remove outer padding. In other words, launch Emacs without a visible frame and ensure that there's no gap between Emacs and other windows.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (setq frame-resize-pixelwise t)
#+end_src

Disable scroll-bar, tool-bar, start-up greeting message, and message at the top of Scratch buffers.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src

** Native Compilation Cache Location
Preset for =no-littering= (from https://github.com/emacscollective/no-littering).
#+begin_src emacs-lisp
  (when (and (fboundp 'startup-redirect-eln-cache)
	     (fboundp 'native-comp-available-p)
	     (native-comp-available-p))
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** no-littering

#+begin_src emacs-lisp
  (use-package no-littering)
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** package management
#+begin_src emacs-lisp
  (setopt package-archives
	  '(("gnu" . "https://elpa.gnu.org/packages/")
	    ("nongnu" . "https://elpa.nongnu.org/nongnu/")
	    ("melpa" . "https://melpa.org/packages/")))
#+end_src

** Fonts and other styles

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Input Mono")
  (set-face-attribute 'fixed-pitch nil :font "Input Mono" :height 1.0)
  (set-face-attribute 'variable-pitch nil :font "Input Sans" :height 1.0)
  (global-visual-line-mode 1)
#+end_src

*** mixed-pitch-mode

#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode))
#+end_src

** org-mode

#+begin_src emacs-lisp
  (use-package org
    :delight org-mode "org-mode"		; define mode-line lighter
    :custom
    (org-startup-indented t)
    (org-ellipsis " …")
    (set-face-underline 'org-ellipsis nil) ; remove underline from custom org-ellipsis
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    (org-hide-emphasis-markers t)
    (org-pretty-entities t))
#+end_src

*** org-modern

#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :custom
    (org-modern-hide-stars nil)		; adds extra indentation
    (org-modern-block-name '("" . ""))
    (org-modern-fold-stars
     '(("►" . "▼") ("►" . "▼") ("►" . "▼") ("►" . "▼") ("►" . "▼")))
    :hook
    (org-mode . org-modern-mode))
#+end_src
**** org-modern-indent

#+begin_src emacs-lisp
  (use-package org-modern-indent
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** Key-mapping and -binding
*** Modifiers Keys on MacOS
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta
          mac-option-modifier 'super
          mac-function-modifier 'hyper
          mac-right-option-modifier nil))
#+end_src

*** free-keys

#+begin_src emacs-lisp
  (use-package free-keys
    :custom
    (free-keys-modifiers '("" "C" "M" "C-M" "s" "H")))
#+end_src

** Completion and the Minibuffer
*** Save recent files
#+begin_src emacs-lisp
  (use-package recentf
    :config
    ;; (setq recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG" "github.*txt$"
    ;;                         "[0-9a-f]\\{32\\}-[0-9a-f]\\{32\\}\\.org"
    ;;                         ".*png$" ".*cache$"))
    (setq recentf-max-saved-items 500))
#+end_src
*** Save minibuffer history
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

*** Consult
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
	   ("M-s c" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history)                ;; orig. previous-matching-history-element
	   ;; Other commands
	   ("C-x C-r" . consult-recent-file)) ;; orig. find-file-read-only

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )

  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))
#+end_src

*** Embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    ;; (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
	   ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

*** transient
#+begin_src emacs-lisp
  (use-package transient)
#+end_src

** Writing, Editing, and Navigation
*** Better Default Commands
**** 
*** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind 
    ("s-q" . avy-goto-char))
#+end_src
*** ace-link

#+begin_src emacs-lisp
  (use-package ace-link
    :ensure t
    :config
    (ace-link-setup-default))
#+end_src

*** ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o". ace-window))
#+end_src

*** zoom-window

#+begin_src emacs-lisp
  (use-package zoom-window
    :ensure t
    :bind ("C-\\" . zoom-window-zoom))	; originally toggleinput-method
#+end_src

*** vundo
#+begin_src emacs-lisp
  (use-package vundo
    :ensure t
    :bind ("C-x u" . vundo))
#+end_src

*** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

*** denote

#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :bind (("C-c n n" . denote)
	   ("C-c n s" . denote-subdirectory)
	   ("C-c n i" . denote-link)
	   ("C-c n l" . denote-link-find-file)
	   ("C-c n b" . denote-link-backlinks))
    :hook
    (dired-mode . denote-dired-mode)
    :custom
    (denote-directory "~/notes/"))

  (use-package consult-denote
    :ensure t
    :bind (("C-c n f" . consult-denote-find)
	   ("C-c n g" . consult-denote-grep))
    :config
    (consult-denote-mode 1))
#+end_src

*** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

** Windows, Buffers, and Tabs
*** tab-bar
#+begin_src emacs-lisp
  ;; (setq tab-bar-show 1)                      ;; hide bar if <= 1 tabs open
  (customize-set-variable 'tab-bar-show nil) ; on customize-set-variable see https://emacs.stackexchange.com/a/106
  ;; (setq tab-bar-close-button-show nil)       ;; hide tab close / X button
  ;; (setq tab-bar-tab-hints nil) ;; show tab numbers
  ;; (setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator)) ;; elements to include in bar
#+end_src

*** mode-line
**** minions
#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :config 
    (minions-mode 1))
#+end_src
**** mode-line-bell

#+begin_src emacs-lisp
  (use-package mode-line-bell
    :init (mode-line-bell-mode))
#+end_src

*** activities
#+begin_src emacs-lisp
  (use-package activities
    :init
    (activities-mode)
    (activities-tabs-mode)
    ;; Prevent `edebug' default bindings from interfering.
    (setq edebug-inhibit-emacs-lisp-mode-bindings t)

    :bind
    (("C-x C-a C-n" . activities-new)
     ("C-x C-a C-d" . activities-define)
     ("C-x C-a C-a" . activities-resume)
     ("C-x C-a C-s" . activities-suspend)
     ("C-x C-a C-k" . activities-kill)
     ("C-x C-a RET" . activities-switch)
     ("C-x C-a b" . activities-switch-buffer)
     ("C-x C-a g" . activities-revert)
     ("C-x C-a l" . activities-list)))
#+end_src

*** popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("s--"   . popper-toggle)
	   ("s-="   . popper-cycle)
	   ("s-_" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
	  '("\\*Messages\\*"
	    "Output\\*$"
	    "\\*Async Shell Command\\*"
	    help-mode
	    compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** dired
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
*** dired+
#+begin_src emacs-lisp
  (use-package dired+)
#+end_src

*** casual-dired
#+begin_src emacs-lisp
  (use-package casual-dired
    :commands casual-dired-tmenu
    :bind (:map dired-mode-map ("C-z d h" . #'casual-dired-tmenu)))
#+end_src

** Version Control
*** magit
#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))
#+end_src
** Programming

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))

  (use-package geiser-mit 
    :ensure t
    :config
    (setq geiser-racket-binary (executable-find "Racket")))

  (use-package ultra-scroll-mac
    :if (eq window-system 'mac)
    ;:load-path "~/code/emacs/ultra-scroll-mac" ; if you git clone'd instead of package-vc-install
    :init
    (setq scroll-conservatively 101 ; important!
	  scroll-margin 0) 
    :config
    (ultra-scroll-mac-mode 1))

  (use-package py-vterm-interaction
    :hook (python-mode . py-vterm-interaction-mode)
    :config
    ;;; Suggested:
    ;; (setq-default py-vterm-interaction-repl-program "ipython")
    ;; (setq-default py-vterm-interaction-silent-cells t)
    )
#+end_src

*** treesit
*** python
*** racket
** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
   :pin manual ;; manually update
   :mode  ("\\.pdf\\'" . pdf-view-mode)
   :config
   ;; initialise
   (pdf-tools-install :no-query)
   ;; open pdfs scaled to fit page
   (setq-default pdf-view-display-size 'fit-width)
   ;; automatically annotate highlights
   (setq pdf-annot-activate-created-annotations t)
   ;; use normal isearch
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src
